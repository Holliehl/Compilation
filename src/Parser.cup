/*
 * analyseur syntaxique  du langage timestamp:
 * (voir supports de cours)
 *
 * auteurs : DESSI, GASIOROWSKI, GHARNATI & KELLER
 * (c) 2017
 */ 
package fr.ul.miage.timestamp.generated;

action code {:
	
	//mettre ici le code
	
:}



/* la grammaire */

terminal ADD, MUL, SUB, DIV; 											/* + * - / */
terminal SUP, SUPEG, INF, INFEG, EGL, DIFF;								/* > >= < <= = != */
terminal PO, PF, AO, AF, VIRGULE, PVIR;										/* ( ) { } , ; */
terminal NUM, ENT, AFFECT, STR, IDF;									/* nombres "ent" = "string" identificateur */
terminal PRINT, SI, SINON, TQ, MAIN, RETURN;							/* print si sinon tantque main return */

non terminal  programme, fonction, definition, instruction, expression, partieDefinition, partieFonction, initialisation, parametreFonction, parametre,
partieDefinitions, partieInstructions, boucleSi,boucleTq, main, contenu, parametresFonction, return, condition, var,
alternative, ecrire, lire, appel, 
operationPrioritaire,operationNonPrioritaire, operationfin, parametresAppel,parametreAppel;

start with programme;

programme ::= partieDefinition partieFonction main;

partieDefinition ::= definition partieDefinition
					| /* vide */
					;
		
definition ::= ENT IDF initialisation PVIR;

initialisation ::= EGL NUM
				|VIRGULE IDF /* ent a,b; */
				| /* vide */
				;

partieFonction ::= fonction partieFonction
					| /* vide */
					;

fonction ::= ENT IDF PO parametresFonction PF AO contenu return AF 
			;
			
parametresFonction ::= parametre VIRGULE parametresFonction
					| parametre
					| /* vide */
					;
					
parametre ::= ENT IDF
			;

contenu ::= partieDefinitions partieInstructions
		;
		
partieDefinitions ::= definition partieDefinitions
					| /* vide */
					;
					
partieInstructions ::= instruction partieInstructions
					| /* vide*/
					;

instruction ::= definition
	|alternative 
	|boucleSi
	|boucleTq
	|lire
	|ecrire /*tentative de définition en dessous*/
	|appel /*à définir*/
	;
 
return ::= RETURN expression
		|RETURN appel
		;

ecrire ::= PRINT PO appel PF
		|PRINT PO IDF PF
		|PRINT PO NUM PF
		|PRINT PO expression PF /*qu'est ce qu'on peut print de +?*/
		;

appel ::= IDF PO parametresAppel PF;

parametresAppel ::= parametreAppel VIRGULE parametresAppel
				|parametresAppel
				;

parametreAppel ::=expression; /* je sais pas si c'est à garder ou pas aussi*/

main ::= MAIN PO PF AO contenu AF;
		
expression ::=operationNonPrioritaire; /*à supprimer? mais pas sûre du tout pcq expression
c'est bien comme nom pour le reste de la grammaire, c'est explicite */

/*grammaire pour les expressions arithmétiques se basant sur la diapo du cours (celle sur cup)
les noms (operationNonPrioritaire, operationPrioritaire...) sont très bof, dans sa diapo
le prof lui a mis des a,x,f mais je trouve ça encore + ambigu donc jsp pas trop*/
operationNonPrioritaire ::= operationNonPrioritaire ADD operationPrioritaire
							|operationNonPrioritaire SUB operationPrioritaire
							|operationPrioritaire
							;

operationPrioritaire ::= operationPrioritaire DIV operationfin
						|operationPrioritaire MUL operationfin
						|operationfin
						;

operationfin ::= NUM
		|IDF
		|PO operationNonPrioritaire PF 
		;
		

boucleSi ::= SI PO condition PF AO contenu AF SINON AO contenu AF
			|SI PO condition PF AO contenu AF
			;

boucleTq ::= TQ PO condition PF AO contenu AF;

condition ::= expression SUP expression
			| expression SUPEG expression
			| expression INF expression
			| expression INFEG expression
			| expression EGL expression
			| expression DIFF expression
			;
			
var ::= STR AFFECT NUM VIRGULE var 
		|STR AFFECT expression VIRGULE var
		|STR AFFECT NUM
		|STR AFFECT expression
		|STR VIRGULE
		|STR
		;
		

 
			
