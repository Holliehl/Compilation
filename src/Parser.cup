/*
 * analyseur syntaxique  du langage timestamp:
 * (voir supports de cours)
 *
 * auteurs : DESSI, GASIOROWSKI, GHARNATI & KELLER
 * (c) 2017
 */ 
package fr.ul.miage.timestamp.generated;

action code {:
	
	//mettre ici le code
	
:}



/* la grammaire */

terminal ADD, MUL, SUB, DIV; 											/* + * - / */
terminal SUP, SUPEG, INF, INFEG, EGL, DIFF;								/* > >= < <= = != */
terminal PO, PF, AO, AF, VIRGULE, PVIR;										/* ( ) { } , ; */
terminal NUM, ENT, AFFECT, STR, IDF;									/* nombres "ent" = "string" identificateur */
terminal RD, PRT, SI, SINON, TQ, MAIN, RETURN;							/* read print si sinon tantque main return */

non terminal  programme, fonction, definition, instruction, expression, partieDefinition, partieFonction, initialisation, parametreFonction, parametre,
partieDefinitions, partieInstructions, bsi,btq, main, contenu, ligne, parametresFonction, return, condition, var, commentaire;

start with programme;

programme ::= partieDefinition partieFonction main;

partieDefinition ::= definition partieDefinition
					| /* vide */
					;
		
definition ::= ENT IDF initialisation PVIR;

initialisation ::= EGL NUM
					| /* vide */
					;

partieFonction ::= fonction partieFonction
					| /* vide */
					;

fonction ::= ENT IDF PO parametresFonction PF AO contenu return AF 
			;
			
parametresFonction ::= parametre VIRGULE parametresFonction
					| parametre
					;
					
parametre ::= ENT IDF
			;

contenu ::= partieDefinitions partieInstructions
		;
		
partieDefinitions ::= definition partieDefinitions
					| /* vide */
					;
					
partieInstructions ::= instruction partieInstructions
					| /* vide*/
					;
 
main ::= MAIN PO PF AO contenu AF
	|MAIN PO PF AO AF;
		
		
expression ::= PO expression PF 
		| expression ADD expression 
		| expression MUL expression 
		| expression SUB expression 
		| expression DIV expression
		| RD
		| STR
		| NUM
		;
		
bsi ::= SI PO condition PF AO contenu AF SINON AO contenu AF
		|SI condition AO contenu AF
		;

btq ::= TQ PO condition PF AO contenu AF;

return ::= RETURN expression;

condition ::= expression SUP expression
			| expression SUPEG expression
			| expression INF expression
			| expression INFEG expression
			| expression EGL expression
			| expression DIFF expression
			;
			
var ::= STR AFFECT NUM VIRGULE var 
		|STR AFFECT expression VIRGULE var
		|STR AFFECT NUM
		|STR AFFECT expression
		|STR VIRGULE
		|STR
		;
commentaire ::= POURC STR ENDL;

 
			
