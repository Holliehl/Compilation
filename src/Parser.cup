/*
 * analyseur syntaxique  du langage timestamp:
 * (voir supports de cours)
 *
 * auteurs : DESSI, GASIOROWSKI, GHARNATI & KELLER
 * (c) 2017
 */ 
package fr.ul.miage.timestamp.generated;
import java.util.ArrayList;

action code {:
	// on ne met pas le "type" de nos fonctions/variables dans la TDS car toutes nos fonctions
	// retournent des ent, sauf les "main" qui seront eux classés sous la catégorie "main",
	// pas besoin donc de les différencier une fois de plus
	ArrayList<String[]> TDS=new ArrayList<String[]>(); /*pour la TDS, on a une liste de tableaux qui contiendront:*/
	public void updateTDS(String id, String resultinit[],String cat){ /*le nom de la var/fonction,sa catégorie(globale ou pas),sa valeur*/
		String[] decla,decla2;
		decla=new String[3];
		decla[0]=cat;
		decla[1]=id;
		
		if (resultinit == null){ //s'il n'y a eu aucun résultat dans resultinit -> décla de type int a;
			decla[2]="0"; //par default, on initialise les variables sans valeur à 0
		}
		if (resultinit[0]!=null){ //decla de type int a=5;
			int val= (int)resultinit[0];
			decla[2]=resultinit[0];
		}
		if (resultinit[1]!=null){ //decla de type int a,b;
			decla[2]="0";
			decla2=new String[3];
			decla2[0]=cat;
			decla2[1]=resultinit[1];
			decla2[2]="0";
		}
		TDS.add(decla);
		if(decla2!=null){
			TDS.add(decla2);
		}
		//pas fini, reste les fonctions à gérer
	}											
	

	
:}



/* la grammaire */

terminal ADD, MUL, SUB, DIV; 											/* + * - / */
terminal SUP, SUPEG, INF, INFEG, EGL, DIFF;								/* > >= < <= = != */
terminal PO, PF, AO, AF, VIRGULE, PVIR;										/* ( ) { } , ; */
terminal NUM, ENT, IDF;									/* nombres "ent" = "string" identificateur */
terminal PRINT, SI, SINON, TQ, MAIN, RETURN;							/* print si sinon tantque main return */

non terminal  programme, fonction, definition, instruction, expression, partieDefinition, partieFonction, initialisation, parametreFonction, parametre,
partieDefinitionFonction, partieInstructions, boucleSi,boucleTq, main, contenu, parametresFonction, return, condition, var,
ecrire, lire, appel, 
operationPrioritaire,operationNonPrioritaire, operationfin, parametresAppel,parametreAppel;

start with programme;

programme ::= partieDefinition partieFonction main;

partieDefinition ::= definition{: updateTDS(id,resultinit,"global") :} partieDefinition
					| /* vide */
					;
		
definition ::= ENT IDF:id initialisation:resultinit PVIR{: RESULT=id,resultinit :};

initialisation ::= EGL NUM:val
				|VIRGULE IDF:id /* ent a,b; */
				| /* vide */
				{:RESULT={val,id}; :}
				;

partieFonction ::= fonction partieFonction
					| /* vide */
					;

fonction ::= ENT IDF:id PO parametresFonction PF AO contenu return AF 
			;
			
parametresFonction ::= parametre VIRGULE parametresFonction
					| parametre
					| /* vide */
					;
					
parametre ::= ENT IDF
			;

contenu ::= partieDefinitionFonction partieInstructions
		;
		
partieDefinitionFonction ::= definition partieDefinitionFonction
					| /* vide */
					;
					
partieInstructions ::= instruction partieInstructions
					| /* vide*/
					;

instruction ::= definition 
	|boucleSi
	|boucleTq
	|lire
	|ecrire /*tentative de définition en dessous*/
	|appel /*à définir*/
	;
 
return ::= RETURN expression
		|RETURN appel
		;

ecrire ::= PRINT PO appel PF
		|PRINT PO IDF PF
		|PRINT PO NUM PF
		|PRINT PO expression PF /*qu'est ce qu'on peut print de +?*/
		;

appel ::= IDF PO parametresAppel PF;

parametresAppel ::= parametreAppel VIRGULE parametresAppel
				|parametresAppel
				;

parametreAppel ::=expression; /* je sais pas si c'est à garder ou pas aussi*/

main ::= MAIN PO PF AO contenu AF;
		
expression ::=operationNonPrioritaire; /*à supprimer? mais pas sûre du tout pcq expression
c'est bien comme nom pour le reste de la grammaire, c'est explicite */

/*grammaire pour les expressions arithmétiques se basant sur la diapo du cours (celle sur cup)
les noms (operationNonPrioritaire, operationPrioritaire...) sont très bof, dans sa diapo
le prof lui a mis des a,x,f mais je trouve ça encore + ambigu donc jsp pas trop*/
operationNonPrioritaire ::= operationNonPrioritaire ADD operationPrioritaire
							|operationNonPrioritaire SUB operationPrioritaire
							|operationPrioritaire
							;

operationPrioritaire ::= operationPrioritaire DIV operationfin
						|operationPrioritaire MUL operationfin
						|operationfin
						;

operationfin ::= NUM
		|IDF
		|PO operationNonPrioritaire PF 
		;
		

boucleSi ::= SI PO condition PF AO contenu AF SINON AO contenu AF
			|SI PO condition PF AO contenu AF
			;

boucleTq ::= TQ PO condition PF AO contenu AF;

condition ::= expression SUP expression
			| expression SUPEG expression
			| expression INF expression
			| expression INFEG expression
			| expression EGL expression
			| expression DIFF expression
			;
			

		

 
			
